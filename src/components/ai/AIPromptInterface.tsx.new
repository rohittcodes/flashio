'use client';

import { FC, useState, useRef, useEffect, ReactNode } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Sparkles, Send, ChevronDown, Code, FileCode, GitBranch, Loader2, Settings, Database, Layout, Server, Globe, Check, X, ArrowRight, ArrowLeft, Info, Clock, Settings2, Shield, Wrench } from 'lucide-react';

interface Suggestion {
  title: string;
  description: string;
  icon: ReactNode;
}

interface AIResponse {
  id: string;
  text: string;
  timestamp: Date;
}

interface TechStack {
  id: string;
  name: string;
  description: string;
  category: 'frontend' | 'backend' | 'database' | 'devops' | 'testing';
  icon: ReactNode;
  recommended?: boolean;
}

type WizardStep = 'prompt' | 'details' | 'techs' | 'preview';

const AIPromptInterface: FC<{}> = () => {
  const [prompt, setPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [responses, setResponses] = useState<AIResponse[]>([]);
  const promptRef = useRef<HTMLTextAreaElement>(null);
  const responseEndRef = useRef<HTMLDivElement>(null);
  const [wizardStep, setWizardStep] = useState<WizardStep>('prompt');
  const [projectDetails, setProjectDetails] = useState({
    name: '',
    description: '',
    type: 'web',
    complexity: 'medium'
  });
  const [selectedTechs, setSelectedTechs] = useState<string[]>([]);
  const [estimatedTime, setEstimatedTime] = useState('');
  const [projectStructure, setProjectStructure] = useState<string[]>([]);
  
  const suggestions: Suggestion[] = [
    {
      title: 'Create New Project',
      description: 'Generate a new project with recommended tech stack',
      icon: <FileCode className="w-5 h-5" />,
    },
    {
      title: 'Add Feature',
      description: 'Implement a new feature in your codebase',
      icon: <Code className="w-5 h-5" />,
    },
    {
      title: 'Refactor Code',
      description: 'Optimize and improve existing code',
      icon: <GitBranch className="w-5 h-5" />,
    },
  ];

  const techStacks: TechStack[] = [
    { id: 'react', name: 'React', description: 'Component-based UI library', category: 'frontend', icon: <Code className="w-5 h-5" /> },
    { id: 'next', name: 'Next.js', description: 'React framework with SSR', category: 'frontend', icon: <Globe className="w-5 h-5" /> },
    { id: 'vue', name: 'Vue.js', description: 'Progressive JavaScript framework', category: 'frontend', icon: <Layout className="w-5 h-5" /> },
    { id: 'tailwind', name: 'Tailwind CSS', description: 'Utility-first CSS framework', category: 'frontend', icon: <Settings className="w-5 h-5" /> },
    { id: 'node', name: 'Node.js', description: 'JavaScript runtime', category: 'backend', icon: <Server className="w-5 h-5" /> },
    { id: 'express', name: 'Express', description: 'Minimal web framework for Node.js', category: 'backend', icon: <Server className="w-5 h-5" /> },
    { id: 'fastify', name: 'Fastify', description: 'Fast Node.js framework', category: 'backend', icon: <Server className="w-5 h-5" /> },
    { id: 'postgres', name: 'PostgreSQL', description: 'Advanced SQL database', category: 'database', icon: <Database className="w-5 h-5" /> },
    { id: 'mongo', name: 'MongoDB', description: 'NoSQL document database', category: 'database', icon: <Database className="w-5 h-5" /> },
    { id: 'prisma', name: 'Prisma', description: 'Next-gen ORM', category: 'database', icon: <Database className="w-5 h-5" /> },
    { id: 'docker', name: 'Docker', description: 'Container platform', category: 'devops', icon: <Settings2 className="w-5 h-5" /> },
    { id: 'jest', name: 'Jest', description: 'JavaScript testing framework', category: 'testing', icon: <Shield className="w-5 h-5" /> },
    { id: 'cypress', name: 'Cypress', description: 'End-to-end testing', category: 'testing', icon: <Wrench className="w-5 h-5" /> },
  ];

  // Auto-scroll to bottom when new responses come in
  useEffect(() => {
    if (responseEndRef.current) {
      responseEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [responses]);

  // Update tech recommendations based on project type
  useEffect(() => {
    if (wizardStep === 'techs') {
      // Simulate AI recommending technologies based on project type
      const recommendedTechs: string[] = [];
      
      if (projectDetails.type === 'web') {
        recommendedTechs.push('next', 'react', 'tailwind', 'prisma', 'postgres');
      } else if (projectDetails.type === 'api') {
        recommendedTechs.push('node', 'express', 'mongo', 'jest');
      } else if (projectDetails.type === 'mobile') {
        recommendedTechs.push('react', 'tailwind');
      }
      
      setSelectedTechs(recommendedTechs);
      
      // Estimate completion time based on complexity
      let baseTime = 0;
      switch(projectDetails.complexity) {
        case 'simple': baseTime = 5; break;
        case 'medium': baseTime = 15; break;
        case 'complex': baseTime = 30; break;
      }
      setEstimatedTime(`~${baseTime} minutes`);
      
      // Generate mock project structure
      const structure = [
        `${projectDetails.name}/`,
        `├── src/`,
        `│   ├── components/`,
        `│   ├── ${projectDetails.type === 'api' ? 'routes/' : 'pages/'}`,
        `│   ├── ${projectDetails.type === 'web' ? 'styles/' : 'middleware/'}`,
        `│   └── ${projectDetails.type === 'web' ? 'assets/' : 'controllers/'}`,
        `├── public/`,
        `├── package.json`,
        `├── README.md`,
        `└── .gitignore`
      ];
      
      setProjectStructure(structure);
    }
  }, [wizardStep, projectDetails]);

  const handleSubmit = async () => {
    if (!prompt.trim()) return;
    
    // Add user prompt to responses
    const userPromptResponse: AIResponse = {
      id: `user-${Date.now()}`,
      text: prompt.trim(),
      timestamp: new Date(),
    };
    
    setResponses(prev => [...prev, userPromptResponse]);
    setIsGenerating(true);
    
    // Start the project wizard
    setWizardStep('details');
    
    // Extract project details from prompt
    const nameMatch = prompt.match(/(?:called|named|titled)\s+["']?([^"'.,]+)["']?/i);
    const projectName = nameMatch ? nameMatch[1].trim() : "new-project";
    
    setProjectDetails(prev => ({
      ...prev,
      name: projectName,
      description: prompt
    }));
    
    try {
      // Simulate AI response
      await new Promise(resolve => setTimeout(resolve, 1500)); 
      
      // Add AI response
      const aiResponse: AIResponse = {
        id: `ai-${Date.now()}`,
        text: `I'll help you create a ${projectName} project. Let's configure some details.`,
        timestamp: new Date(),
      };
      
      setResponses(prev => [...prev, aiResponse]);
      setPrompt(''); // Clear prompt after sending
    } catch (error) {
      console.error('Failed to generate AI response:', error);
      // Add error response
      setResponses(prev => [
        ...prev, 
        { 
          id: `error-${Date.now()}`, 
          text: 'Sorry, I encountered an error processing your request. Please try again.', 
          timestamp: new Date() 
        }
      ]);
    } finally {
      setIsGenerating(false);
    }
  };

  const generateMockResponse = (prompt: string): string => {
    // This is a placeholder function that should be replaced with actual AI integration
    const responses = [
      "I've analyzed your request and created a solution. Here's what I've come up with...",
      "Based on your requirements, I recommend the following approach...",
      "I've generated code that implements the feature you described. You can find it in the editor.",
      "Your project has been set up with the recommended tech stack. You can now start coding!",
    ];
    return responses[Math.floor(Math.random() * responses.length)] +
      "\n\n```javascript\n// Example code\nfunction example() {\n  console.log('Generated solution');\n}\n```";
  };

  const applySuggestion = (suggestion: Suggestion) => {
    setPrompt(`${suggestion.title}: ${suggestion.description}`);
    setShowSuggestions(false);
    if (promptRef.current) {
      promptRef.current.focus();
    }
  };

  const handleNextStep = () => {
    switch (wizardStep) {
      case 'details':
        setWizardStep('techs');
        break;
      case 'techs':
        setWizardStep('preview');
        break;
      case 'preview':
        // Finalize and generate project
        setIsGenerating(true);
        setTimeout(() => {
          setResponses(prev => [...prev, {
            id: `ai-${Date.now()}`,
            text: `Your ${projectDetails.name} project has been created successfully! I've set up the project with ${selectedTechs.map(id => techStacks.find(t => t.id === id)?.name).join(', ')}. You can now access it from your dashboard.`,
            timestamp: new Date()
          }]);
          setWizardStep('prompt');
          setIsGenerating(false);
        }, 3000);
        break;
    }
  };

  const handlePreviousStep = () => {
    switch (wizardStep) {
      case 'details':
        setWizardStep('prompt');
        break;
      case 'techs':
        setWizardStep('details');
        break;
      case 'preview':
        setWizardStep('techs');
        break;
    }
  };

  const toggleTech = (techId: string) => {
    setSelectedTechs(prev => 
      prev.includes(techId) 
        ? prev.filter(id => id !== techId)
        : [...prev, techId]
    );
  };

  const renderWizardStep = () => {
    switch (wizardStep) {
      case 'prompt':
        return (
          <>
            {/* Response history */}
            {responses.length > 0 && (
              <div className="mb-6 bg-gray-900 rounded-lg p-4 max-h-[400px] overflow-y-auto">
                {responses.map((response) => (
                  <div 
                    key={response.id} 
                    className={`mb-4 p-3 rounded-lg ${
                      response.id.startsWith('user') 
                        ? 'bg-indigo-900/30 ml-8' 
                        : 'bg-gray-800/60 mr-8'
                    }`}
                  >
                    <div className="text-sm text-gray-400 mb-1">
                      {response.id.startsWith('user') ? 'You' : 'AI Assistant'} • {response.timestamp.toLocaleTimeString()}
                    </div>
                    <div className="whitespace-pre-wrap">{response.text}</div>
                  </div>
                ))}
                <div ref={responseEndRef} />
              </div>
            )}

            {/* Main prompt input */}
            <div className="relative">
              <textarea
                ref={promptRef}
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
                placeholder="Describe your project or feature..."
                className="w-full min-h-[120px] p-4 pr-12 bg-gray-800 text-white rounded-lg border border-gray-700 focus:ring-2 focus:ring-indigo-500 focus:border-transparent resize-none"
                onKeyDown={(e) => {
                  if (e.key === 'Enter' && e.ctrlKey) {
                    e.preventDefault();
                    handleSubmit();
                  }
                }}
              />
              <button
                onClick={handleSubmit}
                disabled={isGenerating || !prompt.trim()}
                className="absolute right-3 bottom-3 p-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:bg-gray-600 disabled:cursor-not-allowed transition-colors"
              >
                {isGenerating ? (
                  <Loader2 className="w-5 h-5 animate-spin" />
                ) : (
                  <Send className="w-5 h-5" />
                )}
              </button>
            </div>

            {/* Suggestions toggle */}
            <div className="mt-2 flex justify-between items-center">
              <button
                onClick={() => setShowSuggestions(!showSuggestions)}
                className="text-sm flex items-center gap-1 text-gray-400 hover:text-white"
              >
                <Sparkles className="w-4 h-4" />
                Suggestions
                <ChevronDown className={`w-4 h-4 transition-transform ${showSuggestions ? 'rotate-180' : ''}`} />
              </button>
              <div className="text-xs text-gray-500">Ctrl+Enter to send</div>
            </div>

            {/* Suggestions */}
            <AnimatePresence>
              {showSuggestions && (
                <motion.div
                  initial={{ opacity: 0, height: 0 }}
                  animate={{ opacity: 1, height: 'auto' }}
                  exit={{ opacity: 0, height: 0 }}
                  className="mt-2 overflow-hidden"
                >
                  <div className="bg-gray-800 rounded-lg p-2 grid grid-cols-1 sm:grid-cols-3 gap-2">
                    {suggestions.map((suggestion) => (
                      <button
                        key={suggestion.title}
                        onClick={() => applySuggestion(suggestion)}
                        className="p-3 bg-gray-700 hover:bg-gray-600 rounded-lg text-left transition-colors"
                      >
                        <div className="flex items-center gap-2 mb-1">
                          <div className="p-1 bg-indigo-500/20 rounded-md text-indigo-400">
                            {suggestion.icon}
                          </div>
                          <div className="font-medium">{suggestion.title}</div>
                        </div>
                        <div className="text-sm text-gray-400 pl-7">{suggestion.description}</div>
                      </button>
                    ))}
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </>
        );

      case 'details':
        return (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-gray-800 rounded-lg p-6 border border-gray-700"
          >
            <h3 className="text-xl font-semibold text-white mb-4">Project Configuration</h3>
            
            <div className="space-y-4 mb-6">
              <div>
                <label htmlFor="project-name" className="block text-sm font-medium text-gray-400 mb-1">
                  Project Name
                </label>
                <input
                  id="project-name"
                  type="text"
                  value={projectDetails.name}
                  onChange={(e) => setProjectDetails(prev => ({ ...prev, name: e.target.value }))}
                  className="w-full p-2 bg-gray-700 text-white rounded-md border border-gray-600 focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                  placeholder="my-awesome-project"
                />
              </div>
              
              <div>
                <label htmlFor="project-type" className="block text-sm font-medium text-gray-400 mb-1">
                  Project Type
                </label>
                <select
                  id="project-type"
                  value={projectDetails.type}
                  onChange={(e) => setProjectDetails(prev => ({ ...prev, type: e.target.value }))}
                  className="w-full p-2 bg-gray-700 text-white rounded-md border border-gray-600 focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                >
                  <option value="web">Web Application</option>
                  <option value="api">API / Backend</option>
                  <option value="mobile">Mobile App</option>
                  <option value="desktop">Desktop App</option>
                  <option value="cli">CLI Tool</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">
                  Project Complexity
                </label>
                <div className="flex items-center space-x-4">
                  {['simple', 'medium', 'complex'].map((complexity) => (
                    <label key={complexity} className="flex items-center space-x-2 cursor-pointer">
                      <input
                        type="radio"
                        checked={projectDetails.complexity === complexity}
                        onChange={() => setProjectDetails(prev => ({ ...prev, complexity }))}
                        className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-600"
                      />
                      <span className="capitalize text-white">{complexity}</span>
                    </label>
                  ))}
                </div>
              </div>
            </div>
            
            <div className="flex justify-between">
              <button
                onClick={handlePreviousStep}
                className="px-4 py-2 bg-gray-700 text-white rounded-md hover:bg-gray-600 transition-colors flex items-center gap-1"
              >
                <ArrowLeft className="w-4 h-4" /> Back
              </button>
              <button
                onClick={handleNextStep}
                className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors flex items-center gap-1"
              >
                Next <ArrowRight className="w-4 h-4" />
              </button>
            </div>
          </motion.div>
        );

      case 'techs':
        return (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-gray-800 rounded-lg p-6 border border-gray-700"
          >
            <h3 className="text-xl font-semibold text-white mb-2">Select Technology Stack</h3>
            <p className="text-gray-400 text-sm mb-4">We've recommended some technologies based on your project type.</p>
            
            {['frontend', 'backend', 'database', 'devops', 'testing'].map(category => {
              const techsInCategory = techStacks.filter(tech => tech.category === category);
              if (techsInCategory.length === 0) return null;
              
              return (
                <div key={category} className="mb-6">
                  <h4 className="text-lg font-medium text-gray-300 mb-2 capitalize">{category}</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
                    {techsInCategory.map(tech => (
                      <button
                        key={tech.id}
                        className={`p-3 rounded-lg text-left border transition-colors ${
                          selectedTechs.includes(tech.id)
                            ? 'bg-indigo-900/30 border-indigo-500'
                            : 'bg-gray-700 border-gray-700 hover:border-gray-500'
                        }`}
                        onClick={() => toggleTech(tech.id)}
                      >
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <div className={`p-1 rounded-md ${
                              selectedTechs.includes(tech.id) ? 'bg-indigo-500/30 text-indigo-400' : 'bg-gray-600 text-gray-400'
                            }`}>
                              {tech.icon}
                            </div>
                            <div className="font-medium">{tech.name}</div>
                          </div>
                          {selectedTechs.includes(tech.id) ? (
                            <Check className="w-4 h-4 text-indigo-400" />
                          ) : (
                            <div className="w-4 h-4" />
                          )}
                        </div>
                        <div className="text-xs text-gray-400 mt-1 pl-7">{tech.description}</div>
                      </button>
                    ))}
                  </div>
                </div>
              );
            })}
            
            <div className="flex justify-between">
              <button
                onClick={handlePreviousStep}
                className="px-4 py-2 bg-gray-700 text-white rounded-md hover:bg-gray-600 transition-colors flex items-center gap-1"
              >
                <ArrowLeft className="w-4 h-4" /> Back
              </button>
              <button
                onClick={handleNextStep}
                className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors flex items-center gap-1"
                disabled={selectedTechs.length === 0}
              >
                Next <ArrowRight className="w-4 h-4" />
              </button>
            </div>
          </motion.div>
        );

      case 'preview':
        return (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-gray-800 rounded-lg p-6 border border-gray-700"
          >
            <h3 className="text-xl font-semibold text-white mb-4">Project Preview</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              {/* Left column - Project overview */}
              <div>
                <div className="bg-gray-900 p-4 rounded-lg mb-4">
                  <h4 className="text-lg font-medium text-white mb-2">{projectDetails.name}</h4>
                  <p className="text-gray-400 text-sm mb-4">{projectDetails.description}</p>
                  
                  <div className="flex items-center gap-1 mb-2">
                    <Settings2 className="w-4 h-4 text-gray-500" />
                    <span className="text-gray-300">Type: <span className="capitalize">{projectDetails.type}</span></span>
                  </div>
                  
                  <div className="flex items-center gap-1">
                    <Clock className="w-4 h-4 text-gray-500" />
                    <span className="text-gray-300">Estimated build time: {estimatedTime}</span>
                  </div>
                </div>
                
                <div className="bg-gray-900 p-4 rounded-lg">
                  <h4 className="text-md font-medium text-white mb-2">Selected Technologies</h4>
                  <div className="flex flex-wrap gap-2">
                    {selectedTechs.map(techId => {
                      const tech = techStacks.find(t => t.id === techId);
                      if (!tech) return null;
                      
                      return (
                        <div key={tech.id} className="bg-gray-800 px-2 py-1 rounded flex items-center gap-1">
                          <div className="text-gray-400">{tech.icon}</div>
                          <span>{tech.name}</span>
                        </div>
                      );
                    })}
                  </div>
                </div>
              </div>
              
              {/* Right column - Project structure */}
              <div className="bg-gray-900 p-4 rounded-lg">
                <div className="flex items-center gap-2 mb-3">
                  <FileCode className="w-4 h-4 text-gray-500" />
                  <h4 className="text-md font-medium text-white">Project Structure</h4>
                </div>
                <pre className="text-sm font-mono text-gray-300 overflow-x-auto">
                  {projectStructure.join('\n')}
                </pre>
              </div>
            </div>
            
            <div className="flex justify-between">
              <button
                onClick={handlePreviousStep}
                className="px-4 py-2 bg-gray-700 text-white rounded-md hover:bg-gray-600 transition-colors flex items-center gap-1"
              >
                <ArrowLeft className="w-4 h-4" /> Back
              </button>
              <button
                onClick={handleNextStep}
                className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors flex items-center gap-1"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="w-4 h-4 animate-spin" />
                    Generating
                  </>
                ) : (
                  <>
                    Create Project <FileCode className="w-4 h-4" />
                  </>
                )}
              </button>
            </div>
          </motion.div>
        );
        
      default:
        return null;
    }
  };

  return (
    <div className="relative max-w-4xl mx-auto">
      {renderWizardStep()}
    </div>
  );
};

export default AIPromptInterface;
